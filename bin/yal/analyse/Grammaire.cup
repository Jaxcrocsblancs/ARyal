package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expression.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.arbre.instruction.*;
import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    ECRIRE, POINTVIRGULE, PROGRAMME, DEBUT, ENTIER, TANTQUE, REPETER, FINTANTQUE; 
terminal Symbol    FIN, PLUS, MOINS, MULT, DIV, PAROUV, PARFER, SI, ALORS, SINON, FSI;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON, EGAL, LIRE;
terminal String    CONSTANTEINT, CONSTANTEBOOL, IDF, CHAINECARACTERE ;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, INST, ECR, AFF, LIR, CON, BOUCLE;
non terminal Expression EXPR, CSTE ;
non terminal BlocDInstructions LINST;
non terminal TableDesSymboles LDECL;
non terminal String DECL;

precedence left OU ;
precedence left ET ;
precedence left EGALEGAL, DIFF;
precedence left INF, SUP ;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left NON ;
/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::= 	PROGRAMME IDF DEBUT LINST:lin FIN
	       	    {: RESULT = lin; :}
	    |
	     		PROGRAMME IDF DEBUT LDECL:lid LINST:lin FIN
	        	{: RESULT = lin; :}
	    ;
    
 LINST	::=		LINST:lin INST:i
				{: lin.ajouter(i);
				   RESULT = lin; :}
		|	
				INST:i
				{: BlocDInstructions lin = new BlocDInstructions(ileft+1);
				   lin.ajouter(i);
				   RESULT = lin; :}
		;   
			
INST	::= 	ECR:e POINTVIRGULE
				{: RESULT = e; :}
		|
				AFF:a POINTVIRGULE
				{: RESULT = a; :}
		|
				LIR:l POINTVIRGULE
				{: RESULT = l; :}
		|
				CON:c
				{: RESULT = c; :}
		|		
				BOUCLE:b
				{: RESULT = b; :}
		;
			
LDECL	::=		LDECL:lid DECL:d
				{: lid.ajouter(d);
				   RESULT = lid; :}
		|		DECL:d
				{: TableDesSymboles lid = TableDesSymboles.getInstance();
				   lid.ajouter(d);
				   RESULT = lid; :}
		;	
		
DECL	::= 	ENTIER IDF:i POINTVIRGULE
				{: RESULT = i; :}
 		;		
	
	
BOUCLE 	::= 	TANTQUE  EXPR:e REPETER  LINST:l FINTANTQUE
				{: RESULT = new Boucle(e,l,eleft+1); :}	
		;
		
CON     ::= 	SI EXPR:e ALORS LINST:l FSI
				{: RESULT = new Condition(e,l,null,eleft+1); :}
		|
				SI EXPR:e ALORS LINST:l SINON LINST:ls FSI
				{: RESULT = new Condition(e,l,ls,eleft+1); :}
		;	
			
AFF		::= 	IDF:i EGAL EXPR:e
				{: RESULT = new Affectation(new Variable(ileft+1, i), e, ileft+1); :}
		;			
		
LIR		::= 	LIRE IDF:i
				{: RESULT = new LireExpression(new Variable(ileft+1, i), ileft+1); :}
		;
		
ECR		::= 	ECRIRE CHAINECARACTERE:c
				{: RESULT = new EcrireChaineCaractere(cleft+1, c); :}
		|
				ECRIRE EXPR:e
				{: RESULT = new EcrireExpression(eleft+1, e); :}
		|
		;
            
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |          
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |            
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        | 
                CSTE:c
                {: RESULT = c ; :}
        |
		        IDF:i
		        {: RESULT = new Variable(ileft+1, i); :}
	    |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
	
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       
        		CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :} 
        ;